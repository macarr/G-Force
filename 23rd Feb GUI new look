package com.java.pdfmaker;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;

import org.jpedal.*;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;

//The class that helps bind the F1 key to the help-screen.
class HelpAction extends AbstractAction{
  public void actionPerformed( ActionEvent tf ){
		new HelpView();
	}
}
	
//To show the help-screen.
class HelpView extends JFrame{
	public HelpView(){
		JTextPane helpPane = new JTextPane();
		helpPane.setText("To convert a file to PDF:\n1) First open an Ascii file by clicking on 'Open Ascii File'.\n" +
						 "2) Select your desired font, font-size, and spacing.\n3) Click on 'Save as PDF & Preview'." +
					     "\n\nTo make a change to the font settings or spacing:\n1) Choose the desired settings from the drop down menus.\n" +
					     "2) Click on 'Save as PDF & Preview'.");
		helpPane.setEditable(false);
		this.getContentPane().setLayout(new BorderLayout());
		this.getContentPane().add(helpPane);
		this.setSize(400, 500);
		this.setVisible(true);
	}
}

class UIController extends JPanel implements ActionListener{
	//To open an ascii file
	private JButton openButton;
	//To convert to Pdf 
	private JButton convertButton;
	//To save the Pdf file
	private JButton saveButton;
	//To launch the Pdf file in a real Pdf reader like Acrobat Reader
	private JButton launchPdfButton;
	
	//JComboBox holding the font-name values
	private JComboBox<String> fontNamesCombo;
	//JComboBox holding the font-size values
	private JComboBox<String> fontSizesCombo;
	//JComboBox holding the spacing values
	private JComboBox<String> spacingCombo;
	private UIModel data;
	private String chosenFontName;
	private float chosenFontSize;
	private float chosenSpacing;
	
	//The font-names that shall be used
	private String [] fontNames = {BaseFont.HELVETICA, BaseFont.HELVETICA_OBLIQUE, BaseFont.HELVETICA_BOLD, BaseFont.HELVETICA_BOLDOBLIQUE,
			BaseFont.TIMES_ROMAN, BaseFont.TIMES_ITALIC, BaseFont.TIMES_BOLD, BaseFont.TIMES_BOLDITALIC };
	
	//The font-sizes that shall be used
	private String [] fontSizes = {"6", "7", "8", "9", "10", "11", "12", "13", "14"};
	
	//The spacing values that shall be used
	private String [] spacing = {"1", "2", "3", "4", "5", "6", "7", "8"};
	
	public UIController(Dimension size, UIModel data){
		//Setting the amount of space on the UI that this UIController would occupy
		setPreferredSize(new Dimension(size.width, size.height));
		//this.data holds the miscellaneous data and functionalities 
		this.data = data;
		
		//Instantiating the openButton, setting the ActionListener for it, defining its alignment 
		openButton = new JButton("Open Ascii File");
		openButton.addActionListener(this);
		openButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		
		//Binding the 'F1' key to the 'HelpAction' class. When 'openButton' has focus, pressing the 'F1' key would trigger a
		//'HelpAction', which would display the 'HelpView'.
		openButton.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		openButton.getActionMap().put("showHelp", new HelpAction());
		openButton.setMaximumSize(new Dimension(150, 60));
		openButton.setMinimumSize(new Dimension(150, 60));
		
		//littleTopPane holds the openButton
		JPanel littleTopPane = new JPanel();
		
		//BoxLayout helps us in rendering a properly sized openButton for this application.
		littleTopPane.setLayout(new BoxLayout(littleTopPane, BoxLayout.Y_AXIS));
				
		//Adding some extra space before the openButton
		littleTopPane.add(Box.createRigidArea(new Dimension(0, 20)));
		littleTopPane.add(openButton);
		littleTopPane.add(Box.createRigidArea(new Dimension(0, 20)));
		
		//fontNamesCombo is a JComboBox that holds the font-names that the user can select from.
		fontNamesCombo = new JComboBox<String>(fontNames);
		
		//fontnamesCombo is initially disabled, because the user has not yet opened any Ascii file
		fontNamesCombo.setEnabled(false);
		
		//setting the default item of fontNamesCombo
		fontNamesCombo.setSelectedIndex(0);
		
		//Setting a titled border
		fontNamesCombo.setBorder(BorderFactory.createTitledBorder("Select Font:"));
		fontNamesCombo.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		fontNamesCombo.getActionMap().put("showHelp", new HelpAction());
		
		//fontSizesCombo is a JComboBox that holds the font-sizes that the user can select from.
		fontSizesCombo = new JComboBox<String>(fontSizes);
		fontSizesCombo.setEnabled(false);
		fontSizesCombo.setSelectedIndex((fontSizesCombo.getItemCount()-1)/2);
		fontSizesCombo.setBorder(BorderFactory.createTitledBorder("Select Font Size:"));
		fontSizesCombo.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		fontSizesCombo.getActionMap().put("showHelp", new HelpAction());
		
		//spacingCombo is a JComboBox that holds the spacing values that the user can select from.
		spacingCombo = new JComboBox<String>(spacing);
		spacingCombo.setEnabled(false);
		spacingCombo.setSelectedIndex((spacingCombo.getItemCount()-1)/2);
		spacingCombo.setBorder(BorderFactory.createTitledBorder("Select Spacing:"));
		spacingCombo.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		spacingCombo.getActionMap().put("showHelp", new HelpAction());

		//convertButton sets in motion the steps needed to convert the open Ascii file to a proper Pdf file.
		convertButton = new JButton("Convert to Pdf");
		convertButton.setEnabled(false);
		convertButton.addActionListener(this);
		convertButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		convertButton.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		convertButton.getActionMap().put("showHelp", new HelpAction());
		convertButton.setMaximumSize(new Dimension(150, 60));
		convertButton.setMinimumSize(new Dimension(150, 60));
		
		//Initializing the 'saveButton'.
		saveButton = new JButton("Save Current Pdf");
		saveButton.setEnabled(false);
		saveButton.addActionListener(this);
		saveButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		saveButton.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		saveButton.getActionMap().put("showHelp", new HelpAction());
		saveButton.setMaximumSize(new Dimension(150, 60));
	
		//convertPane would hold the drop-down menus and the 'Convert' button
		JPanel convertPane = new JPanel();
		convertPane.setLayout(new BoxLayout(convertPane, BoxLayout.Y_AXIS));
		
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		
		//Adding the controls to the convertPane
		convertPane.add(fontNamesCombo);
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		convertPane.add(fontSizesCombo);
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		convertPane.add(spacingCombo);
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		convertPane.add(convertButton);
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		convertPane.add(saveButton);
		convertPane.add(Box.createRigidArea(new Dimension(0, 20)));
		convertPane.setBorder(BorderFactory.createMatteBorder(4, 0, 0, 0, new Color(156, 138, 165)));
		
		//setting the layout of controlPane to GridBagLayout
		JPanel controlPane = new JPanel();
		controlPane.setLayout(new BoxLayout(controlPane, BoxLayout.Y_AXIS));
		
		//Adding the 'convertPane' to the current JPanel
		controlPane.add(littleTopPane);
		controlPane.add(convertPane);
		controlPane.setBorder(BorderFactory.createMatteBorder(0, 0, 4, 0, new Color(156, 138, 165)));
		
		//Initializing the 'launchPdfButton'.
		launchPdfButton = new JButton("View in Acrobat");
		launchPdfButton.setEnabled(false);
		launchPdfButton.addActionListener(this);
		launchPdfButton.setAlignmentX(Component.CENTER_ALIGNMENT);
		launchPdfButton.getInputMap().put(KeyStroke.getKeyStroke("F1"), "showHelp");
		launchPdfButton.getActionMap().put("showHelp", new HelpAction());
		launchPdfButton.setMaximumSize(new Dimension(150, 60));
		
		JPanel finalControlPane = new JPanel(new BorderLayout());
		
		JLabel helpTip = new JLabel("Press F1 on Keyboard for Help.");
		helpTip.setForeground(new Color(150, 0, 165));
		helpTip.setHorizontalAlignment(JLabel.CENTER);
		helpTip.setBorder(BorderFactory.createMatteBorder(0, 0, 4, 0, new Color(156, 138, 165)));

		finalControlPane.add(helpTip, BorderLayout.NORTH);
		finalControlPane.add(controlPane, BorderLayout.CENTER);
		
		//Setting the layout of this JPanel (UIControls), and adding the controlPane
		setLayout(new BorderLayout());
		//setBorder(BorderFactory.createLineBorder(new Color(156, 138, 165), 4));
		add(finalControlPane, BorderLayout.NORTH);
	}
	
	public void actionPerformed(ActionEvent e){
		if(e.getSource() == openButton){
			int status  = data.loadFile();
			
			if(status == 1){
				fontNamesCombo.setEnabled(true);
				fontSizesCombo.setEnabled(true);
				spacingCombo.setEnabled(true);
				convertButton.setEnabled(true);
				
			}
		}
		else if(e.getSource() == convertButton){
			chosenFontName = fontNamesCombo.getSelectedItem().toString();
			chosenFontSize = Float.parseFloat(fontSizesCombo.getSelectedItem().toString());
			chosenSpacing = Float.parseFloat(spacingCombo.getSelectedItem().toString());
			
			data.convertFile(chosenFontName, chosenFontSize, chosenSpacing, saveButton, launchPdfButton);
		}
		
		else if(e.getSource() == saveButton){
			data.saveFile(chosenFontName, chosenFontSize, chosenSpacing);
			saveButton.setEnabled(false);
		}
	}
}

class UIModel{
	public UIView subject;
	String inputPath = "";
	String outputPath = "C:/CSE2311/temp.pdf";
	String destinationPath = "";
	private ArrayList<ArrayList<String>> contents;
	//Width of the pdf document's page
	int pageWidth=612;
	//Height of the pdf document's page
	int pageHeight=792;
	
	public UIModel(UIView subject){
		this.subject = subject;
	}
	
	public int loadFile(){
		JFileChooser fC = new JFileChooser();
		int status = 0;
		
		int returnVal = fC.showOpenDialog(subject);

		if(returnVal == JFileChooser.APPROVE_OPTION) {
			inputPath = fC.getSelectedFile().toString();
			contents = inputConverter(inputPath);
			subject.showAsciiFile(contents);
			status = 1;
		}
		return status;
	}
	
	public void saveFile(final String fontName, final float fontSize, final float spacing) {
		JFileChooser fc = new JFileChooser();
		final ArrayList<ArrayList<String>> fileContents = new ArrayList<ArrayList<String>>();
		
		int returnVal = fc.showSaveDialog(subject);

		if(returnVal == JFileChooser.APPROVE_OPTION) {
			destinationPath = fc.getSelectedFile().toString();
		}
		
		for(int blockNum = 1; blockNum < contents.size(); blockNum++){
			fileContents.add(contents.get(blockNum));
		}
	
		subject.displayStatusUpdate("Saving Pdf File...", false);
		Thread PdfMakerThread = new Thread(){
			public void run(){
				new PdfMaker(contents.get(0), fileContents, new Rectangle(pageWidth, pageHeight), destinationPath, fontName, fontSize, spacing).createPDF();
				interrupt();
				subject.displayStatusUpdate("File Saved.", false);
			}
		};
		
		PdfMakerThread.start();
	}
	
	public void convertFile(final String fontName, final float fontSize, final float spacing, final JButton saveButton, final JButton launchPdfButton){
		final ArrayList<ArrayList<String>> fileContents = new ArrayList<ArrayList<String>>();
		
		//First making the subject's status-label blank 
		subject.displayStatusUpdate(" ", false);
		
		for(int blockNum = 1; blockNum < contents.size(); blockNum++){
			fileContents.add(contents.get(blockNum));
		}
	
		subject.displayStatusUpdate("Converting to Pdf...", true);
		Thread PdfMakerThread = new Thread(){
			public void run(){
				new PdfMaker(contents.get(0), fileContents, new Rectangle(pageWidth, pageHeight), outputPath, fontName, fontSize, spacing).createPDF();
				subject.showPdfFile(outputPath, pageWidth, pageHeight);
				saveButton.setEnabled(true);
				launchPdfButton.setEnabled(true);
				interrupt();
			}
		};
		
		PdfMakerThread.start();
	}
	
	public ArrayList<ArrayList<String>> inputConverter(String inputPath){
		ArrayList<ArrayList<String>> cont;

		ArrayList<String> block = new ArrayList<String>();
		String s = "";
		String cur = "";
		cont = new ArrayList<ArrayList<String>>();

		try{
		//Input file
		BufferedReader in = new BufferedReader(new FileReader(inputPath));

		block.add(in.readLine().substring(6));
		block.add(in.readLine().substring(9));
		block.add(in.readLine().substring(8));
	
		cont.add(block);
		
		block = new ArrayList<String>();
		in.readLine();

		int line = 1;
		s = "";
	 	
		
		while((cur = in.readLine()) != null) {
	 		
			if(line <= 6) {
	 			block.add(new String(cur));
	 			line++;
			}
			else {
				cont.add(block);
				block = new ArrayList<String>();
	 			line = 1;
			}
		}
	
		in.close();
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
		return cont;
	}
}

class UIView extends JPanel{
	PdfDecoder tabMusic;
	int currentPage;
	private JPanel centerPane;
	private JLabel statusUpdateLabel;
	private JTextArea asciiDisplay;
	private JProgressBar progressBar;
	private JScrollPane scroller;
	
	class NavigationControl extends JPanel implements ActionListener{
		private JPanel buttonPane;
		private JButton next;
		private JButton prev;
		
		public NavigationControl(){
			buttonPane = new JPanel(new GridBagLayout());
			GridBagConstraints arranger = new GridBagConstraints();
			arranger.fill = GridBagConstraints.BOTH;
			arranger.insets = new Insets(5, 5, 5, 5);
			
			arranger.gridx = 3;
			arranger.gridy = 0;
			arranger.gridwidth = 1;
			arranger.gridheight = 1;
			
			prev = new JButton("Previous Page");
			prev.setEnabled(false);
			prev.setPreferredSize(new Dimension(120, 30));
			prev.addActionListener(this);
			buttonPane.add(prev, arranger);
			
			arranger.gridx = 5;
			arranger.gridy = 0;
			arranger.gridwidth = 2;
			arranger.gridheight = 1;
			
			next = new JButton("Next Page");
			next.setPreferredSize(new Dimension(120, 30));
			next.addActionListener(this);
			buttonPane.add(next, arranger);
			
			setLayout(new BorderLayout());
			add(buttonPane, BorderLayout.CENTER);
		}
		
		public void disableButtons(){
			next.setEnabled(false);
			prev.setEnabled(false);
		}
		
		public void actionPerformed(ActionEvent e){
			if(e.getSource() == next){
				prev.setEnabled(true);
				if(currentPage < tabMusic.getPageCount()){
					currentPage++;
					if(currentPage == tabMusic.getPageCount())
						next.setEnabled(false);
					try{
						tabMusic.decodePage(currentPage);
						tabMusic.setPageParameters(1.5f, currentPage);
						centerPane.repaint();
					}
					catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
			
			else if(e.getSource() == prev){
				next.setEnabled(true);
				if(currentPage > 1){
					currentPage--;
					if(currentPage == 1)
						prev.setEnabled(false);
					try{
						tabMusic.decodePage(currentPage);
						tabMusic.setPageParameters(1.5f, currentPage);
						centerPane.repaint();
					}
					catch(Exception ex){
						ex.printStackTrace();
					}
				}
			}
		}
	}
	
	public UIView(){
		setLayout(new BorderLayout());
		statusUpdateLabel = new JLabel(" ");
		statusUpdateLabel.setForeground(Color.BLUE);
		centerPane = new JPanel(new BorderLayout());
		centerPane.setBackground(Color.gray);
		add(statusUpdateLabel, BorderLayout.NORTH);
		add(centerPane, BorderLayout.CENTER);
	}
	
	public void closePdfFile(){
		if(tabMusic != null){
			tabMusic.closePdfFile();
		}
	}
	
	public void displayStatusUpdate(String status, boolean showProgressBar){
		statusUpdateLabel.setText(status);
		if(showProgressBar){
			progressBar = new JProgressBar();
			progressBar.setIndeterminate(true);
			centerPane.removeAll();
			centerPane.setLayout(new BorderLayout());
			centerPane.add(progressBar, BorderLayout.CENTER);
			centerPane.revalidate();
			centerPane.repaint();
		}
	}
	
	public void showAsciiFile(ArrayList<ArrayList<String>> contents){
		//First making the status-label blank 
		statusUpdateLabel.setText(" ");
		asciiDisplay = new JTextArea(100, 100);
		asciiDisplay.append(contents.get(0).get(0) + "\n");
		asciiDisplay.append(contents.get(0).get(1) + "\n");
		asciiDisplay.append(contents.get(0).get(2) + "\n\n");
		
		for(int blockNum = 1; blockNum < contents.size(); blockNum++){
			for(int lineNum = 0; lineNum < contents.get(blockNum).size(); lineNum++){
				asciiDisplay.append(contents.get(blockNum).get(lineNum) + "\n");
			}
		}
		centerPane.removeAll();
		centerPane.setLayout(new BorderLayout());
		centerPane.add(new JScrollPane(asciiDisplay), BorderLayout.CENTER);
		centerPane.revalidate();
		centerPane.repaint();
	}
	
	public void showPdfFile(String outputPath, int pageWidth, int pageHeight) {
		currentPage = 1;
		tabMusic = new PdfDecoder();

		try {
			tabMusic.openPdfFile(outputPath);
			tabMusic.decodePage(currentPage);
			tabMusic.setPageParameters(1.5f, currentPage);
		}
		catch (Exception e) {
		}

		//first we clear up the centerPane
		centerPane.removeAll();
		centerPane.setLayout(new BorderLayout());
		//then we add the pdf onto the centerPane and display it
		JScrollPane scroller = new JScrollPane(tabMusic, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		centerPane.add(scroller, BorderLayout.CENTER);
		NavigationControl pageNav = new NavigationControl();
		if(tabMusic.getPageCount() == 1){
			pageNav.disableButtons();
		}
		centerPane.add(pageNav, BorderLayout.SOUTH);
		centerPane.revalidate();
		centerPane.repaint();
		statusUpdateLabel.setText(" ");
	}
}

public class GUI extends JFrame{
	public GUI(){
		Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
		final UIView subject = new UIView();
		UIModel data = new UIModel(subject);
		UIController ui = new UIController(new Dimension(size.width/6, size.height/3), data);
		
		Container c = getContentPane();
		c.setLayout(new BorderLayout());
		
		c.add(subject, BorderLayout.CENTER);
		c.add(ui, BorderLayout.EAST);
		
		//setSize(Toolkit.getDefaultToolkit().getScreenSize().width, Toolkit.getDefaultToolkit().getScreenSize().height-45);
		setExtendedState(JFrame.MAXIMIZED_BOTH);
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				subject.closePdfFile();
				new File("C:/CSE2311/temp.pdf").delete();
			}
		});
		setVisible(true);
	}
	
	public static void main(String args[]){
		GUI gui = new GUI();
		
	}
}
